version: '3.4'

services:
 
  indexer: 
    build: 
      context:  .
      dockerfile:  "Indexer/Dockerfile"
    volumes:
    - C:/data:/data
  redis:
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 6379:6379

  loadbalancer:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    build: 
      context:  .
      dockerfile:  "LoadBalancer/Dockerfile"
    ports:
      - 9050:80
    healthcheck:
        test: ["CMD", "none"]

  cacheloadBalancer:
    build: 
      context:  .
      dockerfile:  "CacheLoadBalancer/Dockerfile"
    ports:
      - 9051:80
    healthcheck:
      test: ["CMD", "none"]

  searchapi:
    build: 
      context:  .
      dockerfile:  "SearchAPI/Dockerfile"
    volumes:
      - C:/data:/data
    deploy:
      mode: replicated
      replicas: 5
      endpoint_mode: dnsrr
    restart: on-failure 
    depends_on:
       loadbalancer:
        condition: service_started
    links: 
        - loadbalancer

  consolesearch:
    build:
      context:  .
      dockerfile:  "ConsoleSearchv2/Dockerfile"
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr
    stdin_open: true
    tty: true    
    restart: on-failure
    depends_on:
      loadbalancer:
        condition: service_started
    links:
      - loadbalancer

  websearch:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    build: 
      context:  .
      dockerfile:  "WebSearch/Dockerfile"
    restart: on-failure 
    depends_on:
       loadbalancer:
        condition: service_started
    links: 
        - loadbalancer
    ports:
      - 9002:80
  cachingapi:
    build: 
      context:  .
      dockerfile:  "CachingAPI/Dockerfile"
    restart: on-failure 
    deploy:
      mode: replicated
      replicas: 5
      endpoint_mode: dnsrr
    depends_on:
       loadbalancer:
        condition: service_started
       cacheloadBalancer:
        condition: service_started
    links: 
        - loadbalancer

volumes:
  data:

 