version:  "3.9"

services:
  redis:
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 6379:6379

  indexer: 
    build: 
      context:  .
      dockerfile:  "Indexer/Dockerfile"
    image: kasp608b/searchengine-indexer:${DEPLOY_NUMBER}  
    volumes:
    - C:/data:/data


  loadbalancer: 
    build: 
      context:  .
      dockerfile:  "LoadBalancer/Dockerfile"
    image: kasp608b/searchengine-loadbalancer:${DEPLOY_NUMBER}
    ports:
      - 9050:80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://loadbalancer/LoadBalancer/ping"]
      interval: 10s
      timeout: 10s
      retries: 5

  cacheloadBalancer:
    image: kasp608b/searchengine-cacheloadbalancer:${DEPLOY_NUMBER}
    build: 
      context:  .
      dockerfile:  "CacheLoadBalancer/Dockerfile"
    ports:
      - 9051:80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://cacheloadbalancer/CacheLoadBalancer/ping"]
      interval: 10s
      timeout: 10s
      retries: 5

  searchapi:
    ports:
      - 9010:80
    build: 
      context:  .
      dockerfile:  "SearchAPI/Dockerfile"
    image: kasp608b/searchengine-searchapi:${DEPLOY_NUMBER}
    volumes:
      - C:/data:/data
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr
    restart: on-failure 
    depends_on:
       loadbalancer:
        condition: service_healthy
    links: 
        - loadbalancer

  consolesearch:
    build:
      context:  .
      dockerfile:  "ConsoleSearchv2/Dockerfile"
    image: kasp608b/searchengine-consolesearch:${DEPLOY_NUMBER}
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr
    stdin_open: true
    tty: true    
    restart: on-failure
    depends_on:
      loadbalancer:
        condition: service_healthy
    links:
      - loadbalancer

  websearch:
    build: 
      context:  .
      dockerfile:  "WebSearch/Dockerfile"
    image: kasp608b/searchengine-websearch:${DEPLOY_NUMBER}
    restart: on-failure 
    depends_on:
       loadbalancer:
        condition: service_healthy
    links: 
        - loadbalancer
    ports:
      - 9002:80
  
  test: 
   build: 
     context:  .
     dockerfile:  "TestProject/Dockerfile"
   volumes:
    - C:/data:/data
  cachingapi:
    ports:
      - 9003:80
    build: 
      context:  .
      dockerfile:  "CachingAPI/Dockerfile"
    image: kasp608b/searchengine-cachingapi:${DEPLOY_NUMBER}
    restart: on-failure 
    depends_on:
       loadbalancer:
        condition: service_healthy
       cacheloadBalancer:
        condition: service_healthy
    links: 
        - loadbalancer

volumes:
  data: